import neurolab as nl
import numpy as np
from sklearn.preprocessing import OneHotEncoder

'''
author: sushovan.adhikari
1. _input_values represent the game states(i.e game environment, one specific setting in a game equals to one state)
       - 1 represent pacman
       - 2 represent ghost
       - (-1) represent walls
       - the pacman is static, only the position of ghost changes.

2. target_values represent the corresponding action for each state in _input_values, len(_input_values) = len(target_values)
       - these values are retrived by using the trained q-table(using q-learning), q-table has the higest reward move for each state.
       - by putting ghost at different position in the maze, and retrieving the higest reward move from the q-table.
'''


_input_values = [[[ 2.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  2.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]],
       
       [[ 1.,  0.,  2.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  2.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  2.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  2.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  2.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  2.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 2., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  2., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  2.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 2.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]],
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  2.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  2.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  2.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  2.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  2., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  2.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 2., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  2., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  2.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  2., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  2.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  2.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  2.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  2.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 2.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  2.,  0.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  2.,  0.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  2.,  0.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  2.,  0.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  2.,  0.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  2.,  0.]], 
       
       [[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1., -1., -1., -1.,  0., -1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.],
       [ 0., -1., -1.,  0., -1., -1., -1.,  0.],
       [-1.,  0., -1., -1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  2.]]]

# 4 stay put, 0 up, 1 down, 2 left, 3 right
target_values = [4, 2, 2, 2, 2, 2, 2, 2, 
                 0, 0, 0, 
                 0, 2, 2, 2, 2, 0, 0, 
                 0, 0, 0, 
                 1, 3, 3, 3, 0, 
                 3, 3, 3, 3, 0, 0, 0, 0]

print(f'length of input values:{len(_input_values)}')
print(f'length of target values:{len(target_values)}')

# Convert to numpy array
input_values_np = np.array(_input_values)
target_values_np = np.array(target_values)

size = len(_input_values)

# Assuming 4 unique target values (stay put, up, down, left, right)
encoder = OneHotEncoder(sparse=False)
encoded_targets = encoder.fit_transform(target_values_np.reshape(-1, 1))

# Reshape target values if necessary (depending on your library)
target_values_np = encoded_targets.reshape((-1, len(encoded_targets[0])))  # Assuming one-hot encoded with 4 categories


# inp = input_values_np.reshape((-1, 1))
# tar = target_values_np.reshape((-1, 1))

# Define the range of values
min_val = -1
max_val = 2

# Define the input ranges for each neuron
input_ranges = [[min_val, max_val]] * 34

# Define the architecture of the neural network (e.g., one hidden layer with 10 neurons and one output neuron)
architecture = [10, 5]  # Change this according to your problem

# Create the neural networkå
net = nl.net.newff(input_ranges, architecture)

input_values_reshaped = input_values_np.reshape(input_values_np.shape[0], -1)


# Train network
error = net.train(input_values_reshaped, target_values_np, epochs=500, show=100, goal=0.02)

